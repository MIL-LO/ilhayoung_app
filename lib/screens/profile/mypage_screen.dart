import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../core/enums/user_type.dart';
import '../../components/common/unified_app_header.dart';
import '../../services/auth_service.dart'; // AuthService import Ï∂îÍ∞Ä

class MyPageScreen extends StatefulWidget {
  final UserType userType;
  final Function? onLogout;

  const MyPageScreen({
    Key? key,
    required this.userType,
    this.onLogout,
  }) : super(key: key);

  @override
  State<MyPageScreen> createState() => _MyPageScreenState();
}

class _MyPageScreenState extends State<MyPageScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  bool _isLoggingOut = false; // Î°úÍ∑∏ÏïÑÏõÉ ÏÉÅÌÉú Î≥ÄÏàò Ï∂îÍ∞Ä

  @override
  void initState() {
    super.initState();
    _setupAnimations();
  }

  void _setupAnimations() {
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOut,
    ));

    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final bool isEmployer = widget.userType == UserType.employer;
    final Color primaryColor = isEmployer
        ? const Color(0xFF2D3748) // ÏÇ¨ÏóÖÏûêÏö© ÌòÑÎ¨¥ÏïîÏÉâ
        : const Color(0xFF00A3A3); // Íµ¨ÏßÅÏûêÏö© Ï†úÏ£º Î∞îÎã§ÏÉâ

    return Scaffold(
      backgroundColor: const Color(0xFFF8FFFE),
      appBar: UnifiedAppHeader(
        title: 'ÎßàÏù¥ÌéòÏù¥ÏßÄ',
        subtitle: isEmployer ? 'ÏÇ¨ÏóÖÏûê Ï†ïÎ≥¥ Í¥ÄÎ¶¨' : 'ÎÇ¥ Ï†ïÎ≥¥ Í¥ÄÎ¶¨',
        emoji: isEmployer ? 'üè¢' : 'üë§',
      ),
      body: FadeTransition(
        opacity: _fadeAnimation,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20),
          child: Column(
            children: [
              _buildProfileCard(primaryColor, isEmployer),
              const SizedBox(height: 24),
              _buildMenuSection(primaryColor, isEmployer),
              const SizedBox(height: 24),
              _buildSettingsSection(primaryColor),
              const SizedBox(height: 32),
              _buildLogoutButton(primaryColor),
              const SizedBox(height: 100), // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î Ïó¨Î∞±
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProfileCard(Color primaryColor, bool isEmployer) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: isEmployer
              ? [const Color(0xFF2D3748), const Color(0xFF4A5568)] // ÏÇ¨ÏóÖÏûêÏö©
              : [const Color(0xFF00A3A3), const Color(0xFF00B8B8)], // Íµ¨ÏßÅÏûêÏö©
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: primaryColor.withOpacity(0.3),
            blurRadius: 15,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            width: 80,
            height: 80,
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              shape: BoxShape.circle,
              border: Border.all(
                color: Colors.white.withOpacity(0.3),
                width: 2,
              ),
            ),
            child: Icon(
              isEmployer ? Icons.business : Icons.person,
              size: 40,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 16),

          Text(
            isEmployer ? 'ÍπÄÏÇ¨ÏóÖÏûê' : 'ÌôçÍ∏∏Îèô',
            style: const TextStyle(
              fontSize: 22,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 4),

          Text(
            isEmployer ? 'Ï†úÏ£ºÏπ¥Ìéò ÎåÄÌëú' : 'Íµ¨ÏßÅÏûê',
            style: TextStyle(
              fontSize: 14,
              color: Colors.white.withOpacity(0.9),
            ),
          ),
          const SizedBox(height: 20),

          if (isEmployer) ...[
            Row(
              children: [
                Expanded(
                  child: _buildProfileStat('ÌôúÏÑ± Í≥µÍ≥†', '3', Icons.work),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: _buildProfileStat('Í∑ºÎ¨¥Ïûê', '8', Icons.people),
                ),
              ],
            ),
          ] else ...[
            Row(
              children: [
                Expanded(
                  child: _buildProfileStat('ÏßÄÏõê ÏôÑÎ£å', '12', Icons.send),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: _buildProfileStat('ÏßÑÌñâ Ï§ë', '3', Icons.schedule),
                ),
              ],
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildProfileStat(String label, String value, IconData icon) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Icon(icon, color: Colors.white, size: 20),
          const SizedBox(height: 8),
          Text(
            value,
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              color: Colors.white.withOpacity(0.9),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMenuSection(Color primaryColor, bool isEmployer) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            isEmployer ? 'ÏÇ¨ÏóÖÏûê Î©îÎâ¥' : 'ÎÇ¥ ÌôúÎèô',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: primaryColor,
            ),
          ),
          const SizedBox(height: 16),

          if (isEmployer) ...[
            _buildMenuItem(
              'ÎÇ¥ Í≥µÍ≥† Í¥ÄÎ¶¨',
              'Îì±Î°ùÎêú Í≥µÍ≥†Î•º ÌôïÏù∏ÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî',
              Icons.work_outline,
              primaryColor,
                  () => _showFeatureDialog('ÎÇ¥ Í≥µÍ≥† Í¥ÄÎ¶¨'),
            ),
            _buildMenuItem(
              'ÏßÄÏõêÏûê Í¥ÄÎ¶¨',
              'ÏßÄÏõêÏûê ÌòÑÌô©ÏùÑ ÌôïÏù∏ÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî',
              Icons.people_outline,
              primaryColor,
                  () => _showFeatureDialog('ÏßÄÏõêÏûê Í¥ÄÎ¶¨'),
            ),
            _buildMenuItem(
              'Í∏âÏó¨ Í¥ÄÎ¶¨',
              'Í∑ºÎ¨¥Ïûê Í∏âÏó¨Î•º Í≥ÑÏÇ∞ÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî',
              Icons.account_balance_wallet_outlined,
              primaryColor,
                  () => _showFeatureDialog('Í∏âÏó¨ Í¥ÄÎ¶¨'),
            ),
            _buildMenuItem(
              'ÏÇ¨ÏóÖÏû• Ï†ïÎ≥¥',
              'ÏÇ¨ÏóÖÏû• Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌïòÏÑ∏Ïöî',
              Icons.store_outlined,
              primaryColor,
                  () => _showFeatureDialog('ÏÇ¨ÏóÖÏû• Ï†ïÎ≥¥'),
            ),
          ] else ...[
            _buildMenuItem(
              'ÏßÄÏõê ÎÇ¥Ïó≠',
              'ÎÇ¥Í∞Ä ÏßÄÏõêÌïú Í≥µÍ≥†Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî',
              Icons.send_outlined,
              primaryColor,
                  () => _showFeatureDialog('ÏßÄÏõê ÎÇ¥Ïó≠'),
            ),
            _buildMenuItem(
              'Í∑ºÎ¨¥ ÎÇ¥Ïó≠',
              'ÎÇ¥ Í∑ºÎ¨¥ Í∏∞Î°ùÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî',
              Icons.schedule_outlined,
              primaryColor,
                  () => _showFeatureDialog('Í∑ºÎ¨¥ ÎÇ¥Ïó≠'),
            ),
            _buildMenuItem(
              'Í∏âÏó¨ ÎÇ¥Ïó≠',
              'Í∏âÏó¨ ÏßÄÍ∏â ÎÇ¥Ïó≠ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî',
              Icons.account_balance_wallet_outlined,
              primaryColor,
                  () => _showFeatureDialog('Í∏âÏó¨ ÎÇ¥Ïó≠'),
            ),
            _buildMenuItem(
              'Í∞úÏù∏ Ï†ïÎ≥¥',
              'Í∞úÏù∏ Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌïòÏÑ∏Ïöî',
              Icons.person_outline,
              primaryColor,
                  () => _showFeatureDialog('Í∞úÏù∏ Ï†ïÎ≥¥'),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildMenuItem(
      String title,
      String subtitle,
      IconData icon,
      Color color,
      VoidCallback onTap,
      ) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(12),
          onTap: () {
            HapticFeedback.lightImpact();
            onTap();
          },
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey[200]!),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: color.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(icon, color: color, size: 20),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                          color: color,
                        ),
                      ),
                      const SizedBox(height: 2),
                      Text(
                        subtitle,
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                ),
                Icon(
                  Icons.arrow_forward_ios,
                  color: Colors.grey[400],
                  size: 16,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSettingsSection(Color primaryColor) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'ÏÑ§Ï†ï',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: primaryColor,
            ),
          ),
          const SizedBox(height: 16),

          _buildMenuItem(
            'ÏïåÎ¶º ÏÑ§Ï†ï',
            'ÏïåÎ¶º ÏàòÏã† ÏÑ§Ï†ïÏùÑ Î≥ÄÍ≤ΩÌïòÏÑ∏Ïöî',
            Icons.notifications_outlined,
            primaryColor,
                () => _showFeatureDialog('ÏïåÎ¶º ÏÑ§Ï†ï'),
          ),
          _buildMenuItem(
            'Í≥ÑÏ†ï ÏÑ§Ï†ï',
            'ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Î∞è Í≥ÑÏ†ï Í¥ÄÎ¶¨',
            Icons.security_outlined,
            primaryColor,
                () => _showFeatureDialog('Í≥ÑÏ†ï ÏÑ§Ï†ï'),
          ),
          _buildMenuItem(
            'Í≥†Í∞ùÏÑºÌÑ∞',
            'Î¨∏ÏùòÏÇ¨Ìï≠Ïù¥ÎÇò ÎèÑÏõÄÏù¥ ÌïÑÏöîÌïòÏãúÎ©¥ Ïó∞ÎùΩÌïòÏÑ∏Ïöî',
            Icons.help_outline,
            primaryColor,
                () => _showFeatureDialog('Í≥†Í∞ùÏÑºÌÑ∞'),
          ),
          _buildMenuItem(
            'Ïï± Ï†ïÎ≥¥',
            'Î≤ÑÏ†Ñ Ï†ïÎ≥¥ Î∞è Ïù¥Ïö©ÏïΩÍ¥Ä',
            Icons.info_outline,
            primaryColor,
                () => _showFeatureDialog('Ïï± Ï†ïÎ≥¥'),
          ),
        ],
      ),
    );
  }

  Widget _buildLogoutButton(Color primaryColor) {
    return Container(
      width: double.infinity,
      height: 56,
      decoration: BoxDecoration(
        border: Border.all(color: primaryColor),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(16),
          onTap: _isLoggingOut ? null : _handleLogout, // Î°úÎî© Ï§ëÏùº Îïå ÎπÑÌôúÏÑ±Ìôî
          child: Center(
            child: _isLoggingOut
                ? Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                SizedBox(
                  width: 16,
                  height: 16,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(primaryColor),
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  'Î°úÍ∑∏ÏïÑÏõÉ Ï§ë...',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: primaryColor,
                  ),
                ),
              ],
            )
                : Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.logout,
                  color: primaryColor,
                  size: 20,
                ),
                const SizedBox(width: 8),
                Text(
                  'Î°úÍ∑∏ÏïÑÏõÉ',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: primaryColor,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _showFeatureDialog(String feature) {
    final bool isEmployer = widget.userType == UserType.employer;
    final Color primaryColor = isEmployer
        ? const Color(0xFF2D3748)
        : const Color(0xFF00A3A3);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        title: Row(
          children: [
            Icon(
              Icons.construction,
              color: primaryColor,
              size: 24,
            ),
            const SizedBox(width: 8),
            const Text('Ï§ÄÎπÑ Ï§ë'),
          ],
        ),
        content: Text('$feature Í∏∞Îä•ÏùÄ Í≥ß Ï∂îÍ∞ÄÎê† ÏòàÏ†ïÏûÖÎãàÎã§.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            style: TextButton.styleFrom(
              foregroundColor: primaryColor,
            ),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }

  void _handleLogout() async {
    final bool isEmployer = widget.userType == UserType.employer;
    final Color primaryColor = isEmployer
        ? const Color(0xFF2D3748)
        : const Color(0xFF00A3A3);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        title: const Text('Î°úÍ∑∏ÏïÑÏõÉ'),
        content: const Text('Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†ÏäµÎãàÍπå?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Ï∑®ÏÜå',
              style: TextStyle(color: Colors.grey[600]),
            ),
          ),
          TextButton(
            onPressed: () async {
              Navigator.pop(context);

              // Î°úÍ∑∏ÏïÑÏõÉ ÏßÑÌñâ Ï§ë ÏÉÅÌÉú ÌëúÏãú
              setState(() {
                _isLoggingOut = true;
              });

              try {
                // ÏÑúÎ≤Ñ + Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏ÏïÑÏõÉ API Ìò∏Ï∂ú
                final success = await AuthService.logout();

                // Ïä§ÎÇµÎ∞î Î©îÏãúÏßÄ ÌëúÏãú (ÌôîÎ©¥Ïù¥ ÏÇ¨ÎùºÏßÄÍ∏∞ Ï†ÑÏóê)
                if (mounted) {
                  String message;
                  Color backgroundColor;

                  if (success) {
                    message = 'Î°úÍ∑∏ÏïÑÏõÉÎêòÏóàÏäµÎãàÎã§';
                    backgroundColor = primaryColor;
                  } else {
                    message = 'Î°úÍ∑∏ÏïÑÏõÉÎêòÏóàÏäµÎãàÎã§ (ÏùºÎ∂Ä ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïò§Î•ò)';
                    backgroundColor = Colors.orange;
                  }

                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(message),
                      backgroundColor: backgroundColor,
                      behavior: SnackBarBehavior.floating,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                      duration: const Duration(milliseconds: 1500), // ÏßßÍ≤å ÌëúÏãú
                    ),
                  );
                }

                // Ïû†Íπê Í∏∞Îã§Î¶∞ ÌõÑ Î°úÍ∑∏ÏïÑÏõÉ ÏΩúÎ∞± Ïã§Ìñâ (Ïä§ÎÇµÎ∞îÍ∞Ä ÌëúÏãúÎêú ÌõÑ)
                await Future.delayed(const Duration(milliseconds: 500));

                if (widget.onLogout != null) {
                  widget.onLogout!();
                }

              } catch (e) {
                // ÏôÑÏ†ÑÌûà Ïã§Ìå®Ìïú Í≤ΩÏö∞ÎèÑ ÏùºÎã® Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: const Text('Î°úÍ∑∏ÏïÑÏõÉ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏßÄÎßå Î°úÍ∑∏ÏïÑÏõÉÎê©ÎãàÎã§'),
                      backgroundColor: Colors.orange,
                      behavior: SnackBarBehavior.floating,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                      duration: const Duration(milliseconds: 1500),
                    ),
                  );
                }

                // Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ Î°úÍ∑∏ÏïÑÏõÉ ÏΩúÎ∞± Ïã§Ìñâ
                await Future.delayed(const Duration(milliseconds: 500));
                if (widget.onLogout != null) {
                  widget.onLogout!();
                }
              } finally {
                // Î°úÎî© ÏÉÅÌÉú Ìï¥Ï†ú
                if (mounted) {
                  setState(() {
                    _isLoggingOut = false;
                  });
                }
              }
            },
            style: TextButton.styleFrom(
              foregroundColor: primaryColor,
            ),
            child: const Text('Î°úÍ∑∏ÏïÑÏõÉ'),
          ),
        ],
      ),
    );
  }
}