import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import '../../core/enums/user_type.dart';
import '../../components/common/unified_app_header.dart';
import '../auth/auth_wrapper.dart';
import 'worker_info_input_screen.dart';
import 'employer_info_input_screen.dart';

class MyPageScreen extends StatefulWidget {
  final UserType? userType;
  final Function? onLogout;

  const MyPageScreen({Key? key, this.userType, this.onLogout}) : super(key: key);

  @override
  State<MyPageScreen> createState() => _MyPageScreenState();
}

class _MyPageScreenState extends State<MyPageScreen> {
  // ÏÇ¨Ïö©Ïûê ÌÉÄÏûÖÏùÑ ÏúÑÏ†ØÏóêÏÑú Î∞õÍ±∞ÎÇò Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
  late UserType _currentUserType;
  String _userName = 'ÍπÄÏ†úÏ£º';
  String _userEmail = 'kimjeju@gmail.com';
  String _userPhone = '010-1234-5678';
  DateTime _joinDate = DateTime.now().subtract(const Duration(days: 30));
  String _birthDate = '1995ÎÖÑ 3Ïõî 15Ïùº';
  String _address = 'Ï†úÏ£ºÏãú Ïó∞Îèô';
  String _experience = 'Ïπ¥Ìéò ÏÑúÎπô 6Í∞úÏõî, ÏùåÏãùÏ†ê Ï£ºÎ∞© Î≥¥Ï°∞ 3Í∞úÏõî';

  @override
  void initState() {
    super.initState();
    _currentUserType = widget.userType ?? UserType.worker; // Í∏∞Î≥∏Í∞íÏùÄ Íµ¨ÏßÅÏûê
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8FFFE),
      appBar: UnifiedAppHeader(
        title: 'ÎßàÏù¥ÌéòÏù¥ÏßÄ',
        subtitle: 'ÎÇ¥ Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî',
        emoji: 'üë§',
      ),
      body: RefreshIndicator(
        onRefresh: _refreshUserData,
        child: SingleChildScrollView(
          physics: const AlwaysScrollableScrollPhysics(),
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildProfileCard(),
              const SizedBox(height: 24),
              _buildPersonalInfoSection(),
              const SizedBox(height: 24),
              _buildMenuSection(),
              const SizedBox(height: 40),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProfileCard() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: _currentUserType == UserType.worker
              ? [const Color(0xFF00A3A3), const Color(0xFF00D4AA)]
              : [const Color(0xFFFF6B35), const Color(0xFFFF8A50)],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: (_currentUserType == UserType.worker
                ? const Color(0xFF00A3A3)
                : const Color(0xFFFF6B35)).withOpacity(0.3),
            blurRadius: 15,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        children: [
          CircleAvatar(
            radius: 40,
            backgroundColor: Colors.white.withOpacity(0.2),
            child: Text(
              _currentUserType == UserType.worker ? 'üåä' : 'üèîÔ∏è',
              style: const TextStyle(fontSize: 40),
            ),
          ),
          const SizedBox(height: 16),
          Text(
            _userName,
            style: const TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 8),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(20),
            ),
            child: Text(
              _currentUserType == UserType.worker ? 'Íµ¨ÏßÅÏûê' : 'ÏûêÏòÅÏóÖÏûê',
              style: const TextStyle(
                fontSize: 14,
                color: Colors.white,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
          const SizedBox(height: 12),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.calendar_today,
                size: 16,
                color: Colors.white.withOpacity(0.8),
              ),
              const SizedBox(width: 6),
              Text(
                'Í∞ÄÏûÖÏùº: ${_joinDate.year}.${_joinDate.month}.${_joinDate.day}',
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.white.withOpacity(0.8),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildPersonalInfoSection() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'Í∞úÏù∏Ï†ïÎ≥¥',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF2C3E50),
                ),
              ),
              GestureDetector(
                onTap: _editUserInfo,
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: _currentUserType == UserType.worker
                        ? const Color(0xFF00A3A3)
                        : const Color(0xFFFF6B35),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: const Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(Icons.edit, size: 14, color: Colors.white),
                      SizedBox(width: 4),
                      Text(
                        'ÏàòÏ†ï',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.white,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          _buildInfoRow(Icons.cake, 'ÏÉùÎÖÑÏõîÏùº', _birthDate),
          const SizedBox(height: 16),
          _buildInfoRow(Icons.phone, 'Ïó∞ÎùΩÏ≤ò', _userPhone),
          const SizedBox(height: 16),
          _buildInfoRow(Icons.email, 'Ïù¥Î©îÏùº', _userEmail),
          const SizedBox(height: 16),
          _buildInfoRow(
            Icons.location_on,
            _currentUserType == UserType.worker ? 'Í±∞Ï£ºÏßÄ' : 'ÏÇ¨ÏóÖÏßÄ',
            _address
          ),
          const SizedBox(height: 20),
          const Divider(),
          const SizedBox(height: 16),
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Icon(
                Icons.work_outline,
                size: 20,
                color: _currentUserType == UserType.worker
                    ? const Color(0xFF00A3A3)
                    : const Color(0xFFFF6B35),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _currentUserType == UserType.worker ? 'Í≤ΩÎ†•/Í≤ΩÌóò' : 'ÏÇ¨ÏóÖ Í≤ΩÌóò',
                      style: const TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Color(0xFF7F8C8D),
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      _experience,
                      style: const TextStyle(
                        fontSize: 14,
                        color: Color(0xFF2C3E50),
                        height: 1.4,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildInfoRow(IconData icon, String label, String value) {
    return Row(
      children: [
        Icon(
          icon,
          size: 20,
          color: _currentUserType == UserType.worker
              ? const Color(0xFF00A3A3)
              : const Color(0xFFFF6B35),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                label,
                style: const TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                  color: Color(0xFF7F8C8D),
                ),
              ),
              const SizedBox(height: 2),
              Text(
                value,
                style: const TextStyle(
                  fontSize: 14,
                  color: Color(0xFF2C3E50),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildMenuSection() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'ÏÑ§Ï†ï Î∞è ÎèÑÏõÄÎßê',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Color(0xFF2C3E50),
            ),
          ),
          const SizedBox(height: 20),
          _buildMenuItem(
            Icons.notifications_outlined,
            'ÏïåÎ¶º ÏÑ§Ï†ï',
            'Ìë∏Ïãú ÏïåÎ¶º, Ïù¥Î©îÏùº ÏïåÎ¶º ÏÑ§Ï†ï',
            () => _showComingSoon('ÏïåÎ¶º ÏÑ§Ï†ï'),
          ),
          _buildMenuItem(
            Icons.privacy_tip_outlined,
            'Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®',
            'Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏ Î∞è Ïù¥Ïö©ÏïΩÍ¥Ä',
            () => _showComingSoon('Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®'),
          ),
          _buildMenuItem(
            Icons.help_outline,
            'Í≥†Í∞ùÏÑºÌÑ∞',
            'Î¨∏ÏùòÏÇ¨Ìï≠ Î∞è ÏßÄÏõê',
            () => _showCustomerService(),
          ),
          _buildMenuItem(
            Icons.info_outline,
            'Ïï± Ï†ïÎ≥¥',
            'Î≤ÑÏ†Ñ 1.0.0',
            () => _showAppInfo(),
          ),
          const SizedBox(height: 8),
          const Divider(),
          const SizedBox(height: 8),
          _buildMenuItem(
            Icons.logout,
            'Î°úÍ∑∏ÏïÑÏõÉ',
            'Í≥ÑÏ†ïÏóêÏÑú Î°úÍ∑∏ÏïÑÏõÉ',
            () => _logout(),
            isDestructive: true,
          ),
        ],
      ),
    );
  }

  Widget _buildMenuItem(
    IconData icon,
    String title,
    String subtitle,
    VoidCallback onTap, {
    bool isDestructive = false,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(12),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: isDestructive
                    ? Colors.red.withOpacity(0.1)
                    : (_currentUserType == UserType.worker
                        ? const Color(0xFF00A3A3)
                        : const Color(0xFFFF6B35)).withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                icon,
                size: 20,
                color: isDestructive
                    ? Colors.red
                    : (_currentUserType == UserType.worker
                        ? const Color(0xFF00A3A3)
                        : const Color(0xFFFF6B35)),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: isDestructive ? Colors.red : const Color(0xFF2C3E50),
                    ),
                  ),
                  const SizedBox(height: 2),
                  Text(
                    subtitle,
                    style: const TextStyle(
                      fontSize: 12,
                      color: Color(0xFF7F8C8D),
                    ),
                  ),
                ],
              ),
            ),
            Icon(
              Icons.chevron_right,
              color: Colors.grey[400],
            ),
          ],
        ),
      ),
    );
  }

  // Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨Îì§
  void _editUserInfo() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) {
          // ÏÇ¨Ïö©Ïûê ÌÉÄÏûÖÏóê Îî∞Îùº Îã§Î•∏ Ï†ïÎ≥¥ÏûÖÎ†• ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
          if (_currentUserType == UserType.worker) {
            return WorkerInfoInputScreen(
              onComplete: (userType) {
                Navigator.pop(context);
                _refreshUserData();
              },
            );
          } else {
            return EmployerInfoInputScreen(
              onComplete: (userType) {
                Navigator.pop(context);
                _refreshUserData();
              },
            );
          }
        },
      ),
    );
  }

  Future<void> _refreshUserData() async {
    // ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Î°úÏßÅ
    await Future.delayed(const Duration(seconds: 1));
    if (mounted) {
      setState(() {
        // Ïã§Ï†úÎ°úÎäî APIÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º Îã§Ïãú Í∞ÄÏ†∏Ïò¥
      });
    }
  }

  void _showComingSoon(String feature) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('$feature Ï§ÄÎπÑ Ï§ë'),
        content: const Text('Ìï¥Îãπ Í∏∞Îä•ÏùÄ Í≥ß ÏóÖÎç∞Ïù¥Ìä∏Îê† ÏòàÏ†ïÏûÖÎãàÎã§.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }

  void _showCustomerService() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Í≥†Í∞ùÏÑºÌÑ∞'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('üìû Ï†ÑÌôî: 064-123-4567'),
            SizedBox(height: 8),
            Text('üìß Ïù¥Î©îÏùº: support@jejujob.com'),
            SizedBox(height: 8),
            Text('üïí Ïö¥ÏòÅÏãúÍ∞Ñ: ÌèâÏùº 09:00-18:00'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }

  void _showAppInfo() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Ïï± Ï†ïÎ≥¥'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('üèùÔ∏è Ï†úÏ£º ÏùºÏûêÎ¶¨ Îß§Ïπ≠ Ïï±'),
            SizedBox(height: 8),
            Text('üì± Î≤ÑÏ†Ñ: 1.0.0'),
            SizedBox(height: 8),
            Text('üè¢ Í∞úÎ∞ú: ÏùºÌïòÏòÅ ÌåÄ'),
            SizedBox(height: 8),
            Text('üìß Î¨∏Ïùò: info@jejujob.com'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }

  void _logout() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Î°úÍ∑∏ÏïÑÏõÉ'),
        content: const Text('Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†ÏäµÎãàÍπå?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text(
              'Ï∑®ÏÜå',
              style: TextStyle(
                color: Colors.grey,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              _performLogout();
            },
            child: const Text(
              'Î°úÍ∑∏ÏïÑÏõÉ',
              style: TextStyle(
                color: Colors.red,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _performLogout() {
    // Ïã§Ï†ú Î°úÍ∑∏ÏïÑÏõÉ Î°úÏßÅ Íµ¨ÌòÑ
    HapticFeedback.lightImpact();

    Navigator.pushAndRemoveUntil(
      context,
      MaterialPageRoute(
        builder: (context) => const AuthWrapper(),
      ),
      (route) => false,
    );
  }
}